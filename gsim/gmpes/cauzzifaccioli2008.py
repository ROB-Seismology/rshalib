# -*- coding: iso-Latin-1 -*-
"""
Cauzzi & Faccioli (2008) GMPE
"""

from __future__ import absolute_import, division, print_function, unicode_literals


import numpy as np
from scipy.constants import g

from ...utils import interpolate
from ..gmpe import *


__all__ = ['CauzziFaccioli2008GMPE']


class CauzziFaccioli2008GMPE(GMPE):
	"""
	Cauzzi & Faccioli (2008)
		Magnitude scale: MW
		Magnitude range: 5.0 - 7.2
		Distance metric: Hypocentral
		Distance range: 6 - 150 km
		Intensity measure types: PGA, PSD
		Original IMT unit: cm, m/s2
		PSD period range: 0.05 - 20 s
		Dampings for SD: 5, 10, 20, and 30%
		Soil classes:
			type A (rock): vs30 >= 800 m/s
			type B: 360 <= vs30 < 800 m/s
			type C: 180 <= vs30 < 360 m/s
			type D: vs30 < 180 m/s
		Fault types: normal, reverse, strike-slip

		Note: It is advised to use rake-dependency carefully, based on the
		variation observed in sigma with respect to unspecified mechanism.

		Note: A call to this GMPE takes 1 extra parameter 'explicit_vs30'.

		Note: In Nhlib distances are clipped at 15 km (as per Ezio Faccioli's
		personal communication.)
	"""
	def __init__(self):
		imt_periods = {}
		imt_periods["PGA"] = np.array([0.])
		imt_periods["SD"] = np.arange(0.05, 20.01, 0.05)
		imt_periods["SA"] = imt_periods["SD"]
		distance_metric = "Hypocentral"
		Mmin, Mmax = 5., 7.2
		dmin, dmax = 6., 150.
		Mtype = "MW"
		dampings = [5]
		name = "Cauzzi&Faccioli2008"
		short_name = "CF_2008"
		GMPE.__init__(self, imt_periods, distance_metric, Mmin, Mmax, dmin, dmax,
					Mtype, dampings, name, short_name)

		## Coefficients
		self.a1 = {}
		self.a1["PGA"] = np.array([-1.296])
		self.a1["SD"] = np.array([-2.885,-1.908,-1.991,-2.186,-2.299,-2.320,
									-2.353,-2.463,-2.497,-2.541,-2.553,-2.611,
									-2.599,-2.626,-2.697,-2.739,-2.791,-2.797,
									-2.831,-2.863,-2.868,-2.894,-2.936,-2.953,
									-2.978,-3.005,-3.031,-3.047,-3.065,-3.090,
									-3.117,-3.137,-3.143,-3.158,-3.165,-3.163,
									-3.162,-3.152,-3.143,-3.142,-3.147,-3.161,
									-3.176,-3.187,-3.193,-3.196,-3.206,-3.212,
									-3.217,-3.221,-3.224,-3.236,-3.260,-3.283,
									-3.303,-3.316,-3.333,-3.351,-3.369,-3.388,
									-3.409,-3.430,-3.445,-3.457,-3.471,-3.486,
									-3.502,-3.520,-3.541,-3.560,-3.585,-3.614,
									-3.642,-3.667,-3.693,-3.719,-3.746,-3.772,
									-3.795,-3.815,-3.834,-3.853,-3.872,-3.889,
									-3.906,-3.925,-3.945,-3.963,-3.982,-4.000,
									-4.017,-4.035,-4.052,-4.071,-4.092,-4.111,
									-4.126,-4.144,-4.161,-4.180,-4.201,-4.222,
									-4.243,-4.263,-4.281,-4.298,-4.314,-4.329,
									-4.341,-4.353,-4.363,-4.376,-4.388,-4.401,
									-4.413,-4.426,-4.439,-4.450,-4.459,-4.468,
									-4.476,-4.486,-4.495,-4.505,-4.514,-4.523,
									-4.533,-4.543,-4.554,-4.565,-4.576,-4.587,
									-4.597,-4.606,-4.614,-4.622,-4.631,-4.640,
									-4.648,-4.656,-4.665,-4.672,-4.679,-4.685,
									-4.692,-4.697,-4.703,-4.708,-4.713,-4.718,
									-4.724,-4.728,-4.733,-4.737,-4.742,-4.746,
									-4.750,-4.753,-4.758,-4.763,-4.767,-4.770,
									-4.773,-4.776,-4.780,-4.783,-4.787,-4.789,
									-4.792,-4.794,-4.797,-4.800,-4.803,-4.806,
									-4.809,-4.812,-4.814,-4.817,-4.819,-4.822,
									-4.824,-4.827,-4.830,-4.833,-4.835,-4.837,
									-4.839,-4.840,-4.840,-4.841,-4.841,-4.841,
									-4.842,-4.843,-4.845,-4.846,-4.847,-4.849,
									-4.850,-4.851,-4.852,-4.853,-4.854,-4.855,
									-4.855,-4.856,-4.856,-4.856,-4.856,-4.856,
									-4.856,-4.856,-4.855,-4.854,-4.853,-4.851,
									-4.849,-4.848,-4.847,-4.846,-4.845,-4.845,
									-4.844,-4.844,-4.843,-4.843,-4.842,-4.842,
									-4.841,-4.840,-4.839,-4.839,-4.838,-4.838,
									-4.838,-4.838,-4.838,-4.837,-4.837,-4.837,
									-4.836,-4.836,-4.836,-4.835,-4.833,-4.832,
									-4.831,-4.830,-4.828,-4.827,-4.826,-4.825,
									-4.823,-4.822,-4.821,-4.820,-4.819,-4.818,
									-4.817,-4.815,-4.814,-4.812,-4.811,-4.810,
									-4.808,-4.807,-4.806,-4.805,-4.804,-4.802,
									-4.801,-4.799,-4.798,-4.796,-4.794,-4.793,
									-4.791,-4.789,-4.787,-4.784,-4.781,-4.779,
									-4.776,-4.773,-4.771,-4.769,-4.767,-4.765,
									-4.763,-4.760,-4.758,-4.755,-4.752,-4.750,
									-4.747,-4.745,-4.742,-4.740,-4.737,-4.735,
									-4.733,-4.730,-4.728,-4.725,-4.723,-4.720,
									-4.718,-4.716,-4.713,-4.711,-4.709,-4.707,
									-4.705,-4.704,-4.702,-4.700,-4.699,-4.697,
									-4.695,-4.694,-4.692,-4.691,-4.690,-4.689,
									-4.688,-4.687,-4.686,-4.684,-4.683,-4.681,
									-4.680,-4.679,-4.677,-4.676,-4.674,-4.673,
									-4.672,-4.670,-4.669,-4.668,-4.666,-4.665,
									-4.663,-4.662,-4.660,-4.659,-4.656,-4.654,
									-4.652,-4.649,-4.647,-4.645,-4.642,-4.640,
									-4.637,-4.635,-4.633,-4.630,-4.628,-4.626,
									-4.624,-4.622,-4.620,-4.618,-4.616,-4.613,
									-4.611,-4.609,-4.607,-4.605,-4.602,-4.600,
									-4.598,-4.595,-4.593,-4.591,-4.588,-4.586,
									-4.584,-4.581,-4.579,-4.576,-4.573,-4.571,
									-4.568,-4.566,-4.563,-4.560,-4.558,-4.555,
									-4.553,-4.551,-4.548,-4.546,-4.544,-4.541,
									-4.539,-4.537,-4.535,-4.533])
		self.a1["SA"] = self.a1["SD"]
		self.a2 = {}
		self.a2["PGA"] = np.array([0.556])
		self.a2["SD"] = np.array([0.524,0.488,0.522,0.558,0.592,0.614,0.630,
									0.652,0.664,0.674,0.681,0.694,0.700,0.710,
									0.727,0.740,0.755,0.761,0.769,0.777,0.780,
									0.788,0.799,0.804,0.809,0.815,0.821,0.827,
									0.833,0.840,0.848,0.854,0.857,0.861,0.864,
									0.865,0.867,0.868,0.868,0.869,0.870,0.873,
									0.876,0.878,0.878,0.879,0.880,0.880,0.880,
									0.880,0.880,0.881,0.884,0.888,0.890,0.892,
									0.895,0.897,0.900,0.903,0.905,0.908,0.910,
									0.912,0.914,0.916,0.919,0.922,0.925,0.927,
									0.931,0.935,0.939,0.943,0.946,0.950,0.954,
									0.958,0.961,0.965,0.968,0.971,0.974,0.977,
									0.980,0.983,0.986,0.988,0.990,0.993,0.995,
									0.998,1.000,1.003,1.005,1.008,1.009,1.012,
									1.014,1.017,1.019,1.022,1.025,1.028,1.030,
									1.032,1.035,1.036,1.038,1.039,1.041,1.043,
									1.044,1.046,1.047,1.049,1.051,1.052,1.053,
									1.054,1.055,1.056,1.056,1.057,1.058,1.059,
									1.060,1.061,1.062,1.063,1.065,1.066,1.067,
									1.067,1.068,1.069,1.070,1.070,1.071,1.072,
									1.073,1.073,1.074,1.074,1.075,1.075,1.075,
									1.076,1.076,1.076,1.077,1.077,1.077,1.077,
									1.078,1.078,1.078,1.078,1.079,1.079,1.079,
									1.079,1.079,1.079,1.080,1.080,1.080,1.080,
									1.081,1.081,1.081,1.082,1.082,1.082,1.083,
									1.083,1.084,1.084,1.084,1.085,1.085,1.085,
									1.086,1.086,1.086,1.087,1.087,1.087,1.087,
									1.087,1.087,1.087,1.087,1.087,1.087,1.087,
									1.087,1.087,1.087,1.087,1.087,1.088,1.088,
									1.088,1.088,1.088,1.088,1.088,1.088,1.088,
									1.088,1.088,1.088,1.088,1.088,1.088,1.088,
									1.088,1.088,1.087,1.087,1.087,1.087,1.087,
									1.087,1.087,1.087,1.086,1.086,1.086,1.086,
									1.086,1.086,1.086,1.086,1.086,1.086,1.086,
									1.086,1.086,1.086,1.086,1.086,1.086,1.086,
									1.086,1.085,1.085,1.085,1.085,1.085,1.085,
									1.085,1.085,1.084,1.084,1.084,1.084,1.084,
									1.084,1.084,1.084,1.083,1.083,1.083,1.083,
									1.083,1.083,1.083,1.082,1.082,1.082,1.082,
									1.082,1.082,1.081,1.081,1.081,1.081,1.081,
									1.080,1.080,1.080,1.079,1.079,1.079,1.078,
									1.078,1.078,1.077,1.077,1.077,1.076,1.076,
									1.075,1.075,1.074,1.074,1.074,1.073,1.073,
									1.072,1.072,1.072,1.071,1.071,1.071,1.070,
									1.070,1.070,1.069,1.069,1.069,1.069,1.068,
									1.068,1.068,1.068,1.067,1.067,1.067,1.067,
									1.067,1.067,1.067,1.066,1.066,1.066,1.066,
									1.066,1.066,1.066,1.066,1.065,1.065,1.065,
									1.065,1.065,1.065,1.065,1.065,1.065,1.064,
									1.064,1.064,1.064,1.064,1.063,1.063,1.063,
									1.063,1.062,1.062,1.062,1.062,1.061,1.061,
									1.061,1.061,1.060,1.060,1.060,1.060,1.060,
									1.059,1.059,1.059,1.059,1.058,1.058,1.058,
									1.058,1.057,1.057,1.057,1.057,1.056,1.056,
									1.056,1.056,1.055,1.055,1.055,1.055,1.054,
									1.054,1.054,1.054,1.053,1.053,1.053,1.053,
									1.052,1.052,1.052,1.052,1.051,1.051,1.051,
									1.051])
		self.a2["SA"] = self.a2["SD"]
		self.a3 = {}
		self.a3["PGA"] = np.array([-1.582])
		self.a3["SD"] = np.array([-1.713,-1.714,-1.601,-1.516,-1.477,-1.461,-1.453,
								-1.418,-1.407,-1.389,-1.383,-1.368,-1.366,-1.361,
								-1.361,-1.361,-1.369,-1.376,-1.372,-1.369,-1.366,
								-1.366,-1.369,-1.366,-1.359,-1.355,-1.357,-1.361,
								-1.364,-1.367,-1.370,-1.371,-1.370,-1.369,-1.369,
								-1.370,-1.371,-1.371,-1.372,-1.369,-1.368,-1.367,
								-1.365,-1.362,-1.356,-1.350,-1.342,-1.335,-1.327,
								-1.320,-1.313,-1.307,-1.301,-1.296,-1.291,-1.288,
								-1.284,-1.278,-1.273,-1.267,-1.260,-1.256,-1.252,
								-1.248,-1.245,-1.242,-1.239,-1.236,-1.233,-1.229,
								-1.225,-1.221,-1.217,-1.214,-1.211,-1.207,-1.204,
								-1.200,-1.197,-1.195,-1.192,-1.190,-1.187,-1.184,
								-1.181,-1.177,-1.174,-1.170,-1.166,-1.162,-1.159,
								-1.156,-1.154,-1.150,-1.145,-1.141,-1.138,-1.134,
								-1.130,-1.127,-1.124,-1.120,-1.116,-1.113,-1.109,
								-1.106,-1.102,-1.099,-1.096,-1.094,-1.091,-1.089,
								-1.087,-1.084,-1.082,-1.078,-1.075,-1.072,-1.069,
								-1.065,-1.061,-1.057,-1.054,-1.050,-1.047,-1.043,
								-1.040,-1.037,-1.034,-1.031,-1.029,-1.026,-1.023,
								-1.020,-1.017,-1.014,-1.011,-1.008,-1.005,-1.003,
								-1.000,-0.997,-0.995,-0.992,-0.989,-0.987,-0.985,
								-0.983,-0.981,-0.979,-0.978,-0.977,-0.975,-0.974,
								-0.973,-0.972,-0.970,-0.969,-0.967,-0.966,-0.964,
								-0.963,-0.962,-0.960,-0.959,-0.958,-0.958,-0.957,
								-0.956,-0.956,-0.955,-0.955,-0.955,-0.955,-0.955,
								-0.955,-0.955,-0.955,-0.955,-0.955,-0.955,-0.955,
								-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,
								-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,
								-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,
								-0.954,-0.954,-0.954,-0.954,-0.954,-0.954,-0.955,
								-0.955,-0.955,-0.956,-0.956,-0.957,-0.957,-0.957,
								-0.957,-0.957,-0.958,-0.958,-0.958,-0.958,-0.958,
								-0.958,-0.958,-0.958,-0.958,-0.958,-0.959,-0.959,
								-0.960,-0.960,-0.961,-0.961,-0.962,-0.962,-0.963,
								-0.963,-0.964,-0.965,-0.966,-0.966,-0.967,-0.968,
								-0.969,-0.970,-0.971,-0.972,-0.973,-0.974,-0.974,
								-0.975,-0.976,-0.977,-0.977,-0.978,-0.979,-0.980,
								-0.981,-0.982,-0.983,-0.984,-0.985,-0.986,-0.987,
								-0.987,-0.988,-0.989,-0.990,-0.991,-0.992,-0.993,
								-0.994,-0.995,-0.996,-0.997,-0.998,-0.999,-0.999,
								-1.000,-1.001,-1.002,-1.003,-1.004,-1.005,-1.006,
								-1.006,-1.007,-1.008,-1.009,-1.009,-1.010,-1.011,
								-1.011,-1.012,-1.012,-1.013,-1.013,-1.014,-1.014,
								-1.015,-1.016,-1.016,-1.017,-1.017,-1.018,-1.019,
								-1.019,-1.020,-1.021,-1.021,-1.022,-1.023,-1.023,
								-1.024,-1.024,-1.025,-1.026,-1.026,-1.027,-1.027,
								-1.028,-1.029,-1.029,-1.030,-1.031,-1.031,-1.032,
								-1.033,-1.033,-1.034,-1.035,-1.036,-1.036,-1.037,
								-1.038,-1.039,-1.040,-1.040,-1.041,-1.042,-1.043,
								-1.043,-1.044,-1.045,-1.046,-1.047,-1.047,-1.048,
								-1.049,-1.050,-1.050,-1.051,-1.052,-1.053,-1.054,
								-1.054,-1.055,-1.056,-1.057,-1.057,-1.058,-1.059,
								-1.060,-1.060,-1.061,-1.062,-1.063,-1.063,-1.064,
								-1.065,-1.066,-1.067,-1.068,-1.068,-1.069,-1.070,
								-1.071,-1.072,-1.073,-1.073,-1.074,-1.075,-1.076,
								-1.077,-1.078,-1.079,-1.080,-1.081,-1.082,-1.083,
								-1.083,-1.084,-1.085,-1.086,-1.087,-1.088,-1.089,
								-1.090])
		self.a3["SA"] = self.a3["SD"]
		self.aB = {}
		self.aB["PGA"] = np.array([0.22])
		self.aB["SD"] = np.array([0.159,0.219,0.252,0.280,0.247,0.203,0.195,0.174,
								0.177,0.186,0.183,0.179,0.161,0.148,0.145,0.138,
								0.141,0.145,0.150,0.146,0.145,0.139,0.133,0.128,
								0.126,0.124,0.125,0.122,0.121,0.117,0.112,0.108,
								0.101,0.099,0.098,0.095,0.093,0.087,0.083,0.083,
								0.084,0.084,0.085,0.086,0.084,0.080,0.076,0.075,
								0.072,0.070,0.069,0.070,0.072,0.073,0.074,0.074,
								0.076,0.074,0.074,0.073,0.074,0.074,0.076,0.077,
								0.079,0.080,0.081,0.083,0.085,0.087,0.089,0.091,
								0.092,0.092,0.094,0.095,0.096,0.095,0.094,0.093,
								0.091,0.090,0.088,0.086,0.083,0.081,0.080,0.080,
								0.079,0.078,0.078,0.079,0.079,0.080,0.081,0.082,
								0.081,0.080,0.080,0.081,0.081,0.081,0.081,0.080,
								0.080,0.079,0.078,0.077,0.076,0.076,0.076,0.076,
								0.076,0.077,0.076,0.076,0.075,0.074,0.073,0.073,
								0.072,0.071,0.071,0.071,0.071,0.071,0.071,0.071,
								0.072,0.072,0.073,0.074,0.075,0.075,0.075,0.075,
								0.074,0.074,0.073,0.072,0.071,0.070,0.070,0.069,
								0.069,0.069,0.069,0.069,0.070,0.070,0.071,0.072,
								0.072,0.073,0.073,0.073,0.073,0.073,0.073,0.073,
								0.073,0.073,0.073,0.072,0.072,0.072,0.072,0.072,
								0.071,0.071,0.071,0.071,0.071,0.070,0.070,0.069,
								0.069,0.068,0.068,0.068,0.067,0.067,0.067,0.066,
								0.066,0.066,0.066,0.066,0.065,0.065,0.065,0.065,
								0.065,0.065,0.065,0.065,0.064,0.065,0.065,0.065,
								0.065,0.065,0.065,0.064,0.064,0.063,0.063,0.062,
								0.062,0.061,0.060,0.060,0.059,0.058,0.057,0.056,
								0.055,0.054,0.053,0.053,0.052,0.051,0.051,0.051,
								0.050,0.050,0.050,0.050,0.050,0.050,0.050,0.050,
								0.050,0.050,0.050,0.050,0.050,0.050,0.051,0.051,
								0.051,0.052,0.052,0.052,0.053,0.053,0.054,0.055,
								0.055,0.056,0.056,0.057,0.057,0.058,0.058,0.058,
								0.059,0.059,0.060,0.060,0.061,0.061,0.062,0.063,
								0.063,0.064,0.065,0.065,0.066,0.066,0.067,0.067,
								0.068,0.068,0.068,0.068,0.069,0.069,0.069,0.069,
								0.069,0.069,0.069,0.070,0.070,0.071,0.071,0.072,
								0.072,0.073,0.073,0.074,0.074,0.075,0.075,0.076,
								0.076,0.077,0.077,0.077,0.078,0.078,0.078,0.079,
								0.079,0.079,0.080,0.080,0.081,0.081,0.081,0.082,
								0.082,0.083,0.083,0.084,0.084,0.085,0.085,0.085,
								0.085,0.085,0.086,0.086,0.086,0.086,0.086,0.087,
								0.087,0.087,0.087,0.087,0.087,0.087,0.087,0.088,
								0.088,0.088,0.088,0.088,0.088,0.089,0.089,0.089,
								0.089,0.089,0.090,0.090,0.090,0.090,0.090,0.090,
								0.090,0.090,0.090,0.090,0.090,0.090,0.090,0.090,
								0.090,0.090,0.090,0.090,0.090,0.090,0.090,0.090,
								0.091,0.091,0.091,0.091,0.091,0.091,0.091,0.092,
								0.092,0.092,0.092,0.092,0.092,0.093,0.093,0.093,
								0.093,0.093,0.093,0.094,0.094,0.094,0.094,0.094,
								0.095,0.095,0.095,0.095,0.095,0.095,0.096,0.096])
		self.aB["SA"] = self.aB["SD"]
		self.aC = {}
		self.aC["PGA"] = np.array([0.304])
		self.aC["SD"] = np.array([0.191,0.218,0.315,0.421,0.435,0.433,0.457,0.446,
								0.447,0.448,0.451,0.445,0.433,0.425,0.416,0.404,
								0.403,0.408,0.413,0.407,0.402,0.390,0.381,0.372,
								0.369,0.367,0.371,0.366,0.361,0.357,0.351,0.342,
								0.332,0.329,0.327,0.320,0.314,0.304,0.298,0.295,
								0.294,0.293,0.294,0.293,0.291,0.285,0.279,0.273,
								0.267,0.262,0.261,0.260,0.259,0.258,0.257,0.255,
								0.253,0.249,0.246,0.243,0.241,0.239,0.238,0.237,
								0.235,0.234,0.233,0.233,0.234,0.234,0.235,0.235,
								0.236,0.236,0.238,0.239,0.240,0.239,0.237,0.235,
								0.232,0.228,0.225,0.222,0.217,0.215,0.213,0.212,
								0.211,0.210,0.210,0.209,0.209,0.210,0.210,0.211,
								0.210,0.209,0.209,0.209,0.210,0.210,0.210,0.209,
								0.208,0.208,0.207,0.206,0.206,0.206,0.206,0.206,
								0.206,0.206,0.205,0.205,0.204,0.202,0.201,0.200,
								0.199,0.198,0.197,0.196,0.196,0.195,0.194,0.193,
								0.193,0.192,0.192,0.192,0.192,0.192,0.192,0.191,
								0.191,0.190,0.189,0.188,0.188,0.187,0.186,0.186,
								0.186,0.187,0.187,0.188,0.189,0.189,0.190,0.192,
								0.193,0.193,0.194,0.194,0.195,0.195,0.196,0.196,
								0.196,0.195,0.195,0.195,0.194,0.194,0.194,0.193,
								0.193,0.192,0.192,0.191,0.191,0.190,0.190,0.189,
								0.188,0.188,0.187,0.186,0.186,0.185,0.185,0.184,
								0.184,0.184,0.183,0.183,0.183,0.182,0.182,0.182,
								0.181,0.181,0.181,0.181,0.181,0.180,0.180,0.180,
								0.180,0.180,0.180,0.179,0.179,0.178,0.177,0.177,
								0.176,0.175,0.174,0.173,0.173,0.172,0.170,0.170,
								0.169,0.168,0.167,0.167,0.166,0.166,0.166,0.165,
								0.165,0.165,0.165,0.165,0.165,0.165,0.164,0.164,
								0.164,0.164,0.164,0.164,0.164,0.165,0.165,0.165,
								0.165,0.166,0.166,0.166,0.166,0.167,0.167,0.168,
								0.168,0.168,0.169,0.169,0.170,0.170,0.170,0.171,
								0.171,0.171,0.172,0.172,0.173,0.173,0.173,0.174,
								0.175,0.175,0.176,0.176,0.177,0.177,0.178,0.178,
								0.179,0.179,0.179,0.179,0.180,0.180,0.180,0.180,
								0.180,0.181,0.181,0.181,0.182,0.182,0.183,0.184,
								0.184,0.185,0.186,0.186,0.187,0.187,0.188,0.189,
								0.189,0.189,0.190,0.190,0.191,0.191,0.192,0.192,
								0.193,0.193,0.193,0.194,0.194,0.195,0.195,0.196,
								0.196,0.196,0.197,0.197,0.198,0.198,0.198,0.199,
								0.199,0.199,0.199,0.200,0.200,0.200,0.201,0.201,
								0.201,0.201,0.202,0.202,0.202,0.202,0.202,0.203,
								0.203,0.203,0.203,0.204,0.204,0.204,0.205,0.205,
								0.205,0.205,0.206,0.206,0.206,0.206,0.207,0.207,
								0.207,0.207,0.207,0.208,0.208,0.208,0.208,0.208,
								0.208,0.208,0.208,0.209,0.209,0.209,0.209,0.209,
								0.209,0.210,0.210,0.210,0.211,0.211,0.211,0.212,
								0.212,0.212,0.213,0.213,0.214,0.214,0.214,0.214,
								0.215,0.215,0.215,0.216,0.216,0.216,0.217,0.217,
								0.217,0.218,0.218,0.218,0.219,0.219,0.219,0.219])
		self.aC["SA"] = self.aC["SD"]
		self.aD = {}
		self.aD["PGA"] = np.array([0.332])
		self.aD["SD"] = np.array([0.166,0.160,0.293,0.395,0.441,0.455,0.502,0.534,
								0.584,0.636,0.679,0.692,0.695,0.696,0.704,0.704,
								0.709,0.709,0.703,0.686,0.671,0.657,0.639,0.623,
								0.609,0.594,0.585,0.570,0.559,0.551,0.543,0.532,
								0.515,0.504,0.497,0.489,0.482,0.472,0.465,0.460,
								0.459,0.459,0.459,0.457,0.453,0.446,0.440,0.437,
								0.431,0.425,0.424,0.421,0.421,0.420,0.421,0.422,
								0.421,0.416,0.412,0.407,0.402,0.399,0.397,0.395,
								0.393,0.392,0.391,0.392,0.392,0.390,0.389,0.388,
								0.386,0.383,0.382,0.379,0.376,0.372,0.369,0.366,
								0.362,0.360,0.357,0.354,0.350,0.347,0.346,0.345,
								0.344,0.343,0.342,0.341,0.341,0.341,0.341,0.341,
								0.339,0.337,0.336,0.334,0.333,0.331,0.329,0.326,
								0.324,0.322,0.320,0.318,0.316,0.314,0.314,0.313,
								0.313,0.312,0.311,0.309,0.308,0.307,0.306,0.305,
								0.304,0.303,0.303,0.302,0.301,0.301,0.300,0.300,
								0.300,0.300,0.300,0.301,0.302,0.302,0.302,0.302,
								0.303,0.303,0.302,0.302,0.301,0.301,0.300,0.300,
								0.300,0.300,0.300,0.300,0.301,0.302,0.303,0.303,
								0.304,0.305,0.306,0.306,0.307,0.308,0.308,0.309,
								0.309,0.310,0.311,0.311,0.311,0.311,0.311,0.310,
								0.310,0.310,0.310,0.310,0.310,0.310,0.310,0.310,
								0.310,0.310,0.310,0.310,0.310,0.310,0.310,0.310,
								0.309,0.309,0.309,0.309,0.308,0.308,0.308,0.308,
								0.308,0.307,0.307,0.307,0.306,0.306,0.306,0.305,
								0.305,0.305,0.305,0.305,0.304,0.304,0.303,0.303,
								0.302,0.302,0.301,0.300,0.300,0.299,0.298,0.297,
								0.296,0.296,0.295,0.294,0.294,0.294,0.293,0.294,
								0.294,0.294,0.294,0.294,0.294,0.293,0.293,0.293,
								0.293,0.293,0.292,0.292,0.292,0.292,0.292,0.293,
								0.293,0.293,0.293,0.293,0.293,0.294,0.294,0.294,
								0.294,0.295,0.295,0.295,0.296,0.296,0.296,0.296,
								0.297,0.297,0.298,0.298,0.298,0.299,0.299,0.299,
								0.300,0.300,0.301,0.301,0.302,0.302,0.303,0.303,
								0.303,0.303,0.304,0.304,0.304,0.304,0.305,0.305,
								0.305,0.305,0.306,0.306,0.307,0.307,0.308,0.308,
								0.309,0.309,0.310,0.310,0.310,0.311,0.311,0.311,
								0.312,0.312,0.312,0.313,0.313,0.313,0.314,0.314,
								0.314,0.314,0.315,0.315,0.315,0.316,0.316,0.317,
								0.317,0.318,0.318,0.319,0.319,0.320,0.320,0.320,
								0.320,0.321,0.321,0.321,0.321,0.322,0.322,0.322,
								0.322,0.322,0.322,0.322,0.323,0.323,0.323,0.323,
								0.323,0.324,0.324,0.324,0.324,0.324,0.325,0.325,
								0.325,0.325,0.325,0.325,0.326,0.326,0.326,0.326,
								0.326,0.326,0.326,0.326,0.326,0.326,0.326,0.326,
								0.326,0.326,0.326,0.326,0.326,0.326,0.327,0.327,
								0.327,0.327,0.327,0.328,0.328,0.328,0.328,0.328,
								0.329,0.329,0.329,0.330,0.330,0.330,0.330,0.330,
								0.331,0.331,0.331,0.331,0.331,0.331,0.332,0.332,
								0.332,0.332,0.333,0.333,0.333,0.333,0.333,0.333])
		self.aD["SA"] = self.aD["SD"]
		## Sigma for unspecified focal mechanism
		self.SigmaTU = {}
		self.SigmaTU["PGA"] = np.array([0.344])
		self.SigmaTU["SD"] = np.array([0.364,0.376,0.375,0.376,0.367,0.358,0.357,0.357,
								0.353,0.357,0.357,0.355,0.353,0.353,0.351,0.348,
								0.349,0.353,0.353,0.355,0.354,0.354,0.353,0.352,
								0.352,0.352,0.352,0.351,0.351,0.349,0.346,0.344,
								0.341,0.339,0.337,0.335,0.333,0.332,0.330,0.329,
								0.329,0.328,0.328,0.327,0.325,0.323,0.322,0.320,
								0.319,0.318,0.317,0.315,0.313,0.312,0.311,0.310,
								0.309,0.308,0.307,0.306,0.306,0.305,0.304,0.303,
								0.302,0.301,0.299,0.298,0.297,0.295,0.295,0.294,
								0.294,0.294,0.294,0.294,0.294,0.293,0.293,0.293,
								0.292,0.292,0.291,0.291,0.290,0.289,0.289,0.288,
								0.288,0.287,0.287,0.286,0.286,0.285,0.284,0.283,
								0.283,0.282,0.281,0.280,0.280,0.279,0.278,0.277,
								0.277,0.276,0.275,0.274,0.274,0.273,0.273,0.272,
								0.272,0.272,0.271,0.271,0.270,0.270,0.270,0.269,
								0.269,0.269,0.268,0.268,0.268,0.267,0.267,0.267,
								0.266,0.266,0.266,0.266,0.266,0.265,0.265,0.265,
								0.265,0.265,0.265,0.265,0.265,0.265,0.265,0.265,
								0.264,0.264,0.264,0.264,0.263,0.263,0.263,0.263,
								0.262,0.262,0.262,0.262,0.262,0.262,0.261,0.261,
								0.261,0.261,0.260,0.260,0.260,0.260,0.259,0.259,
								0.259,0.259,0.259,0.258,0.258,0.258,0.258,0.257,
								0.257,0.257,0.257,0.256,0.256,0.255,0.255,0.255,
								0.255,0.254,0.254,0.254,0.253,0.253,0.253,0.252,
								0.252,0.252,0.252,0.251,0.251,0.251,0.251,0.251,
								0.250,0.250,0.250,0.250,0.250,0.250,0.249,0.249,
								0.249,0.249,0.249,0.249,0.249,0.249,0.248,0.248,
								0.248,0.248,0.248,0.248,0.248,0.248,0.248,0.248,
								0.247,0.247,0.247,0.247,0.247,0.247,0.247,0.246,
								0.246,0.246,0.246,0.246,0.246,0.246,0.246,0.245,
								0.245,0.245,0.245,0.245,0.245,0.245,0.245,0.244,
								0.244,0.244,0.244,0.244,0.244,0.243,0.243,0.243,
								0.243,0.243,0.243,0.242,0.242,0.242,0.242,0.242,
								0.242,0.241,0.241,0.241,0.241,0.241,0.241,0.241,
								0.240,0.240,0.240,0.240,0.240,0.240,0.240,0.239,
								0.239,0.239,0.239,0.239,0.239,0.239,0.238,0.238,
								0.238,0.238,0.238,0.238,0.238,0.237,0.237,0.237,
								0.237,0.237,0.237,0.237,0.237,0.237,0.237,0.237,
								0.237,0.236,0.236,0.236,0.236,0.236,0.236,0.236,
								0.236,0.236,0.236,0.236,0.236,0.236,0.236,0.236,
								0.236,0.236,0.236,0.236,0.236,0.236,0.236,0.236,
								0.236,0.235,0.235,0.235,0.235,0.235,0.235,0.235,
								0.235,0.235,0.235,0.235,0.235,0.235,0.235,0.235,
								0.235,0.235,0.235,0.235,0.235,0.235,0.235,0.235,
								0.235,0.235,0.235,0.235,0.235,0.236,0.236,0.236,
								0.236,0.236,0.236,0.236,0.236,0.236,0.236,0.236,
								0.236,0.236,0.236,0.236,0.236,0.236,0.237,0.237,
								0.237,0.237,0.237,0.237,0.237,0.237,0.237,0.237,
								0.237,0.237,0.237,0.238,0.238,0.238,0.238,0.238,
								0.238,0.238,0.238,0.238,0.238,0.239,0.239,0.239])
		self.SigmaTU["SA"] = self.SigmaTU["SD"]
		## Rake-dependent terms
		self.aN = {}
		self.aN["PGA"] = np.array([-0.06])
		self.aN["SD"] = np.array([-0.100,-0.089,-0.073,-0.041,-0.051,-0.042,-0.029,-0.025,
								-0.010,-0.005,-0.001,-0.001,0.006,0.002,0.003,0.004,
								0.003,0.011,0.016,0.020,0.018,0.017,0.017,0.022,
								0.025,0.028,0.028,0.027,0.025,0.022,0.017,0.014,
								0.009,0.001,-0.008,-0.014,-0.019,-0.024,-0.030,
								-0.034,-0.039,-0.045,-0.049,-0.055,-0.060,-0.064,-0.066,
								-0.068,-0.072,-0.076,-0.078,-0.080,-0.081,-0.081,-0.080,
								-0.080,-0.080,-0.079,-0.078,-0.078,-0.078,-0.077,-0.076,
								-0.075,-0.075,-0.075,-0.073,-0.071,-0.071,-0.070,-0.070,
								-0.070,-0.069,-0.069,-0.070,-0.070,-0.070,-0.069,-0.069,
								-0.069,-0.069,-0.068,-0.067,-0.066,-0.065,-0.063,-0.062,
								-0.061,-0.059,-0.058,-0.057,-0.056,-0.055,-0.054,-0.053,
								-0.052,-0.051,-0.051,-0.050,-0.050,-0.049,-0.049,-0.048,
								-0.047,-0.046,-0.045,-0.044,-0.043,-0.042,-0.041,-0.039,
								-0.038,-0.036,-0.034,-0.032,-0.030,-0.028,-0.026,-0.024,
								-0.023,-0.021,-0.019,-0.018,-0.016,-0.015,-0.014,-0.013,
								-0.012,-0.011,-0.009,-0.008,-0.007,-0.005,-0.003,-0.002,
								-0.001,0.000,0.001,0.001,0.002,0.002,0.003,0.004,0.005,
								0.006,0.007,0.008,0.008,0.009,0.009,0.010,0.011,0.011,
								0.012,0.013,0.014,0.014,0.015,0.016,0.016,0.017,0.018,
								0.018,0.019,0.019,0.019,0.020,0.019,0.019,0.019,0.018,
								0.018,0.018,0.017,0.017,0.017,0.016,0.016,0.015,0.015,
								0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.015,
								0.015,0.016,0.016,0.016,0.016,0.016,0.016,0.017,0.017,
								0.018,0.018,0.019,0.019,0.020,0.021,0.021,0.021,0.022,
								0.022,0.022,0.023,0.023,0.023,0.024,0.024,0.024,0.024,
								0.025,0.025,0.025,0.025,0.025,0.025,0.026,0.026,0.026,
								0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.027,0.027,
								0.027,0.027,0.027,0.027,0.027,0.027,0.026,0.026,0.026,
								0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.026,
								0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.026,
								0.026,0.026,0.026,0.026,0.026,0.026,0.026,0.025,0.025,
								0.025,0.025,0.025,0.025,0.024,0.024,0.024,0.024,0.024,
								0.024,0.024,0.024,0.023,0.023,0.023,0.023,0.023,0.023,
								0.023,0.023,0.023,0.023,0.023,0.023,0.022,0.022,0.022,
								0.022,0.022,0.022,0.022,0.021,0.021,0.021,0.021,0.020,
								0.020,0.020,0.020,0.019,0.019,0.019,0.019,0.019,0.018,
								0.018,0.018,0.018,0.018,0.018,0.018,0.018,0.018,0.017,
								0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,
								0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,
								0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,0.017,
								0.017,0.016,0.016,0.016,0.016,0.016,0.016,0.016,0.016,
								0.016,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.014,
								0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,0.014,
								0.014,0.014,0.013,0.013,0.013,0.013,0.013,0.013,0.013,
								0.013,0.013,0.013,0.013,0.012,0.012,0.012,0.012,0.012,
								0.012,0.012,0.012,0.012])
		self.aN["SA"] = self.aN["SD"]
		self.aR = {}
		self.aR["PGA"] = np.array([0.094])
		self.aR["SD"] = np.array([0.132,0.127,0.119,0.101,0.085,0.065,0.057,0.051,
								0.037,0.028,0.026,0.017,0.008,0.005,0.002,-0.004,
								-0.006,-0.006,-0.005,-0.003,-0.002,-0.003,-0.004,
								-0.006,-0.008,-0.009,-0.010,-0.010,-0.009,-0.009,
								-0.007,-0.005,-0.004,-0.003,-0.001,0.001,0.003,
								0.005,0.008,0.010,0.012,0.015,0.017,0.020,0.023,
								0.027,0.029,0.032,0.036,0.040,0.043,0.045,0.048,
								0.051,0.053,0.056,0.058,0.060,0.062,0.064,0.065,
								0.066,0.066,0.065,0.065,0.065,0.064,0.062,0.061,
								0.060,0.059,0.057,0.057,0.056,0.056,0.055,0.055,
								0.054,0.053,0.053,0.052,0.051,0.050,0.048,0.047,
								0.045,0.043,0.041,0.039,0.037,0.036,0.034,0.032,
								0.030,0.028,0.026,0.024,0.021,0.019,0.016,0.014,
								0.012,0.010,0.008,0.007,0.005,0.004,0.002,0.001,
								-0.001,-0.002,-0.003,-0.004,-0.005,-0.007,-0.008,
								-0.010,-0.011,-0.012,-0.014,-0.015,-0.017,-0.018,
								-0.020,-0.022,-0.024,-0.027,-0.029,-0.032,-0.034,
								-0.037,-0.039,-0.041,-0.044,-0.046,-0.048,-0.049,
								-0.051,-0.053,-0.054,-0.056,-0.057,-0.059,-0.060,
								-0.062,-0.063,-0.064,-0.066,-0.067,-0.069,-0.070,
								-0.071,-0.073,-0.074,-0.076,-0.077,-0.079,-0.080,
								-0.082,-0.083,-0.084,-0.086,-0.087,-0.088,-0.090,
								-0.091,-0.092,-0.093,-0.094,-0.095,-0.096,-0.096,
								-0.097,-0.098,-0.098,-0.099,-0.099,-0.100,-0.100,
								-0.101,-0.101,-0.102,-0.102,-0.102,-0.102,-0.103,
								-0.103,-0.103,-0.103,-0.103,-0.103,-0.104,-0.104,
								-0.104,-0.104,-0.104,-0.104,-0.105,-0.105,-0.105,
								-0.105,-0.105,-0.105,-0.105,-0.105,-0.105,-0.105,
								-0.105,-0.105,-0.105,-0.105,-0.105,-0.105,-0.105,
								-0.105,-0.105,-0.105,-0.105,-0.104,-0.104,-0.104,
								-0.104,-0.104,-0.104,-0.105,-0.105,-0.104,-0.104,
								-0.104,-0.104,-0.104,-0.104,-0.104,-0.104,-0.103,
								-0.103,-0.103,-0.103,-0.102,-0.102,-0.102,-0.102,
								-0.102,-0.101,-0.101,-0.101,-0.101,-0.101,-0.101,
								-0.101,-0.101,-0.101,-0.101,-0.100,-0.100,-0.100,
								-0.100,-0.100,-0.100,-0.100,-0.100,-0.100,-0.100,
								-0.100,-0.100,-0.100,-0.099,-0.099,-0.099,-0.099,
								-0.099,-0.099,-0.099,-0.099,-0.099,-0.099,-0.099,
								-0.099,-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,
								-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,
								-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,
								-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,
								-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,
								-0.098,-0.098,-0.098,-0.098,-0.098,-0.098,-0.097,
								-0.097,-0.097,-0.097,-0.097,-0.097,-0.097,-0.097,
								-0.097,-0.097,-0.097,-0.096,-0.096,-0.096,-0.096,
								-0.096,-0.096,-0.096,-0.096,-0.096,-0.096,-0.095,
								-0.095,-0.095,-0.095,-0.095,-0.095,-0.095,-0.095,
								-0.095,-0.094,-0.094,-0.094,-0.094,-0.094,-0.094,
								-0.093,-0.093,-0.093,-0.093,-0.093,-0.093,-0.092,
								-0.092,-0.092,-0.092,-0.092,-0.092,-0.091,-0.091,
								-0.091,-0.091,-0.091,-0.091,-0.090,-0.090,-0.090,
								-0.090,-0.090,-0.090,-0.090,-0.090,-0.089,-0.089,
								-0.089,-0.089,-0.089,-0.089,-0.089,-0.088,-0.088,
								-0.088,-0.088,-0.088,-0.088,-0.087,-0.087,-0.087,
								-0.087,-0.087,-0.087,-0.087])
		self.aR["SA"] = self.aR["SD"]
		self.aS = {}
		self.aS["PGA"] = np.array([-0.013])
		self.aS["SD"] = np.array([-0.010,-0.014,-0.018,-0.024,-0.014,-0.010,-0.012,-0.011,
								-0.011,-0.010,-0.010,-0.006,-0.005,-0.003,-0.002,0.001,
								0.002,-0.002,-0.004,-0.006,-0.006,-0.005,-0.005,-0.006,
								-0.006,-0.007,-0.006,-0.006,-0.006,-0.004,-0.003,-0.003,
								-0.001,0.001,0.004,0.005,0.006,0.007,0.008,0.009,0.010,
								0.010,0.011,0.011,0.012,0.011,0.010,0.010,0.010,
								0.009,0.008,0.008,0.007,0.005,0.004,0.002,0.001,
								0.000,-0.002,-0.003,-0.004,-0.004,-0.004,-0.004,-0.004,
								-0.004,-0.004,-0.004,-0.003,-0.003,-0.002,-0.001,-0.001,
								-0.001,0.000,0.000,0.001,0.001,0.001,0.001,0.002,0.002,
								0.002,0.003,0.003,0.003,0.004,0.004,0.005,0.005,0.005,
								0.006,0.007,0.007,0.008,0.008,0.009,0.009,0.010,0.011,
								0.012,0.013,0.013,0.014,0.014,0.014,0.014,0.015,0.015,
								0.015,0.015,0.015,0.015,0.014,0.014,0.014,0.014,0.014,
								0.014,0.014,0.014,0.014,0.014,0.015,0.015,0.016,0.016,
								0.017,0.017,0.018,0.019,0.019,0.020,0.020,0.020,0.021,
								0.021,0.022,0.022,0.022,0.023,0.023,0.023,0.024,0.024,
								0.024,0.024,0.024,0.025,0.025,0.025,0.026,0.026,0.026,
								0.027,0.027,0.027,0.027,0.028,0.028,0.028,0.028,0.029,
								0.029,0.029,0.030,0.030,0.031,0.031,0.031,0.032,0.032,
								0.033,0.033,0.033,0.034,0.034,0.034,0.035,0.035,0.035,
								0.035,0.035,0.036,0.036,0.036,0.036,0.036,0.036,0.036,
								0.036,0.036,0.036,0.036,0.036,0.036,0.036,0.035,0.035,
								0.035,0.035,0.035,0.035,0.035,0.034,0.034,0.034,0.034,
								0.034,0.034,0.034,0.034,0.033,0.033,0.033,0.033,0.033,
								0.033,0.033,0.033,0.033,0.033,0.033,0.033,0.033,0.032,
								0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.033,0.033,0.033,0.033,
								0.033,0.033,0.032,0.032,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.032,
								0.032,0.032,0.032,0.032,0.032,0.032,0.032,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,0.031,
								0.031,0.031,0.031])
		self.aS["SA"] = self.aS["SD"]
		self.SigmaTM = {}
		self.SigmaTM["PGA"] = np.array([0.341])
		self.SigmaTM["SD"] = np.array([0.357,0.370,0.370,0.374,0.366,0.357,0.358,0.357,
									0.354,0.359,0.359,0.357,0.355,0.355,0.353,0.350,
									0.350,0.355,0.355,0.356,0.356,0.356,0.354,0.353,
									0.354,0.353,0.353,0.353,0.352,0.350,0.347,0.345,
									0.343,0.340,0.338,0.336,0.334,0.333,0.331,0.330,
									0.329,0.329,0.328,0.326,0.324,0.322,0.321,0.319,
									0.318,0.316,0.314,0.312,0.311,0.309,0.308,0.307,
									0.306,0.305,0.304,0.303,0.303,0.302,0.301,0.300,
									0.299,0.298,0.296,0.295,0.294,0.293,0.292,0.292,
									0.292,0.293,0.293,0.292,0.292,0.292,0.291,0.291,
									0.291,0.290,0.290,0.289,0.289,0.288,0.288,0.288,
									0.287,0.287,0.287,0.286,0.285,0.285,0.284,0.284,
									0.283,0.282,0.281,0.281,0.280,0.279,0.278,0.278,
									0.277,0.276,0.276,0.275,0.274,0.273,0.273,0.273,
									0.272,0.272,0.272,0.271,0.271,0.271,0.270,0.270,
									0.270,0.269,0.269,0.269,0.268,0.268,0.267,0.267,
									0.266,0.266,0.266,0.266,0.265,0.265,0.265,0.265,
									0.264,0.264,0.264,0.264,0.264,0.264,0.263,0.263,
									0.263,0.262,0.262,0.262,0.261,0.261,0.261,0.260,
									0.260,0.260,0.260,0.259,0.259,0.258,0.258,0.258,
									0.257,0.257,0.257,0.256,0.256,0.255,0.255,0.255,
									0.254,0.254,0.254,0.253,0.253,0.253,0.253,0.252,
									0.252,0.251,0.251,0.251,0.250,0.250,0.249,0.249,
									0.249,0.248,0.248,0.248,0.247,0.247,0.247,0.246,
									0.246,0.246,0.246,0.245,0.245,0.245,0.245,0.244,
									0.244,0.244,0.244,0.244,0.243,0.243,0.243,0.243,
									0.243,0.242,0.242,0.242,0.242,0.242,0.242,0.242,
									0.242,0.242,0.242,0.242,0.242,0.241,0.241,0.241,
									0.241,0.241,0.241,0.241,0.241,0.240,0.240,0.240,
									0.240,0.240,0.240,0.240,0.239,0.239,0.239,0.239,
									0.239,0.239,0.239,0.239,0.239,0.239,0.239,0.238,
									0.238,0.238,0.238,0.238,0.238,0.237,0.237,0.237,
									0.237,0.237,0.237,0.237,0.236,0.236,0.236,0.236,
									0.236,0.236,0.235,0.235,0.235,0.235,0.235,0.235,
									0.235,0.234,0.234,0.234,0.234,0.234,0.234,0.234,
									0.234,0.233,0.233,0.233,0.233,0.233,0.233,0.233,
									0.232,0.232,0.232,0.232,0.232,0.232,0.232,0.232,
									0.231,0.231,0.231,0.231,0.231,0.231,0.231,0.231,
									0.231,0.231,0.231,0.231,0.231,0.231,0.231,0.230,
									0.230,0.230,0.230,0.230,0.230,0.230,0.230,0.230,
									0.230,0.230,0.230,0.230,0.230,0.230,0.230,0.230,
									0.230,0.230,0.230,0.230,0.230,0.230,0.230,0.230,
									0.230,0.230,0.230,0.230,0.230,0.230,0.230,0.230,
									0.230,0.230,0.230,0.230,0.230,0.230,0.230,0.230,
									0.230,0.230,0.230,0.230,0.231,0.231,0.231,0.231,
									0.231,0.231,0.231,0.231,0.231,0.231,0.231,0.231,
									0.231,0.232,0.232,0.232,0.232,0.232,0.232,0.232,
									0.232,0.232,0.232,0.232,0.233,0.233,0.233,0.233,
									0.233,0.233,0.233,0.233,0.233,0.233,0.234,0.234,
									0.234,0.234,0.234,0.234,0.234,0.234,0.235,0.235])
		self.SigmaTM["SA"] = self.SigmaTM["SD"]
		## Explicit vs30
		#self.bV = {}
		#self.bV["PGA"] = np.array([-0.432])
		#self.bV["SD"] = np.array([-0.186,-0.110,-0.357,-0.585,-0.721,-0.798,-0.892,-0.951,-0.996,-1.043,-1.085,-1.099,-1.112,-1.129,-1.123,-1.114,-1.108,-1.103,-1.086,-1.055,-1.026,-1.000,-0.972,-0.941,-0.918,-0.898,-0.883,-0.860,-0.845,-0.834,-0.822,-0.803,-0.783,-0.768,-0.758,-0.746,-0.734,-0.723,-0.712,-0.701,-0.697,-0.694,-0.691,-0.686,-0.680,-0.673,-0.666,-0.655,-0.644,-0.636,-0.634,-0.627,-0.624,-0.621,-0.619,-0.617,-0.613,-0.606,-0.601,-0.594,-0.589,-0.585,-0.582,-0.577,-0.574,-0.571,-0.569,-0.568,-0.565,-0.561,-0.559,-0.556,-0.552,-0.550,-0.547,-0.545,-0.542,-0.538,-0.534,-0.530,-0.526,-0.523,-0.519,-0.516,-0.512,-0.510,-0.508,-0.506,-0.505,-0.504,-0.502,-0.499,-0.497,-0.495,-0.493,-0.492,-0.490,-0.488,-0.486,-0.484,-0.482,-0.480,-0.477,-0.475,-0.474,-0.473,-0.473,-0.472,-0.471,-0.471,-0.471,-0.471,-0.471,-0.471,-0.471,-0.471,-0.470,-0.469,-0.468,-0.467,-0.466,-0.465,-0.464,-0.463,-0.461,-0.459,-0.457,-0.456,-0.453,-0.451,-0.449,-0.448,-0.447,-0.447,-0.447,-0.448,-0.449,-0.449,-0.449,-0.450,-0.450,-0.451,-0.452,-0.453,-0.453,-0.454,-0.455,-0.457,-0.458,-0.460,-0.461,-0.463,-0.465,-0.467,-0.469,-0.471,-0.473,-0.474,-0.475,-0.476,-0.477,-0.478,-0.479,-0.479,-0.479,-0.480,-0.480,-0.480,-0.480,-0.480,-0.479,-0.479,-0.479,-0.479,-0.478,-0.478,-0.478,-0.478,-0.477,-0.477,-0.476,-0.476,-0.475,-0.474,-0.473,-0.472,-0.472,-0.471,-0.470,-0.470,-0.469,-0.469,-0.468,-0.468,-0.467,-0.466,-0.466,-0.465,-0.465,-0.464,-0.463,-0.463,-0.463,-0.463,-0.462,-0.462,-0.461,-0.461,-0.460,-0.460,-0.459,-0.458,-0.457,-0.457,-0.456,-0.456,-0.456,-0.455,-0.455,-0.455,-0.455,-0.455,-0.455,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.455,-0.455,-0.455,-0.455,-0.455,-0.455,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.454,-0.455,-0.455,-0.455,-0.455,-0.455,-0.455,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.456,-0.457,-0.457,-0.457,-0.457,-0.457,-0.457,-0.457,-0.458,-0.458,-0.458,-0.458,-0.459,-0.459,-0.459,-0.460,-0.460,-0.460,-0.461,-0.461,-0.461,-0.462,-0.462,-0.463,-0.463,-0.463,-0.464,-0.464,-0.464,-0.465,-0.465,-0.466,-0.467,-0.467,-0.468,-0.468,-0.469,-0.469,-0.469,-0.470,-0.470,-0.470,-0.471,-0.471,-0.471,-0.472,-0.472,-0.472,-0.473,-0.473,-0.473,-0.473,-0.473,-0.473,-0.474,-0.474,-0.474,-0.474,-0.474,-0.475,-0.475,-0.475,-0.475,-0.475,-0.475,-0.475,-0.476,-0.476,-0.476,-0.476,-0.476,-0.476,-0.476,-0.477,-0.477,-0.477,-0.477,-0.477,-0.478,-0.478,-0.478,-0.478,-0.479,-0.479,-0.479,-0.479,-0.479,-0.480,-0.480,-0.480,-0.480,-0.480,-0.481,-0.481,-0.481,-0.481,-0.482,-0.482,-0.482,-0.483,-0.483,-0.483,-0.484,-0.484,-0.484,-0.485,-0.485,-0.486,-0.486,-0.486,-0.487,-0.487,-0.487,-0.488,-0.488,-0.488,-0.489,-0.489,-0.489,-0.489,-0.490,-0.490,-0.491,-0.491,-0.491,-0.492,-0.492,-0.492,-0.492,-0.493,-0.493])
		#self.bV["SA"] = self.bV["SD"]
		#self.Va = {}
		#self.Va["PGA"] = np.array([1319.1])
		#self.Va["SD"] = np.array([3120.000,2505.000,1890.000,1220.300,948.520,821.610,770.300,715.890,704.360,693.490,675.830,662.050,641.590,625.100,623.620,617.340,622.530,633.640,647.640,647.280,651.350,648.020,648.220,648.030,652.470,656.820,670.910,678.160,683.390,682.560,680.080,677.830,669.710,668.930,668.710,665.350,662.340,653.540,649.200,651.830,653.750,654.370,656.830,659.300,659.440,652.510,647.220,645.870,641.060,637.650,637.240,638.720,640.900,640.550,641.340,641.240,643.370,640.130,637.650,636.950,637.270,637.280,637.290,638.620,639.330,639.460,640.440,643.280,645.950,648.080,651.010,653.940,656.140,658.020,661.580,664.940,667.260,667.530,665.460,663.230,658.680,654.220,649.450,643.460,635.420,630.300,627.690,625.700,624.100,621.880,622.990,624.950,627.600,630.360,633.020,635.580,634.430,633.470,634.310,636.770,639.750,641.750,642.880,641.670,640.470,639.280,637.680,636.720,636.820,637.000,637.780,639.460,640.950,641.460,640.470,639.580,638.170,635.740,634.390,632.300,630.760,630.620,630.820,631.580,632.600,634.160,635.200,636.460,638.680,641.210,644.510,647.970,650.650,651.850,651.380,649.980,648.620,648.130,646.090,643.010,640.810,638.820,636.300,635.220,634.400,634.550,634.430,635.330,636.040,636.800,638.780,640.210,641.780,642.290,642.150,642.180,641.900,641.750,641.720,641.330,640.940,640.520,640.570,639.710,638.970,638.470,637.800,637.640,636.650,636.090,635.880,635.440,635.030,633.990,633.230,631.860,630.780,629.580,628.420,627.840,627.030,626.250,625.660,625.450,625.310,624.470,624.370,624.190,623.770,623.140,622.860,622.090,621.750,621.680,621.700,621.200,621.140,621.250,621.360,621.620,621.010,621.230,621.150,620.520,619.320,618.170,616.820,614.950,613.770,612.660,611.370,609.650,607.920,605.790,603.460,601.230,599.370,597.620,595.720,594.130,592.770,591.490,590.290,589.360,588.720,588.220,587.770,587.730,587.340,586.910,586.590,586.390,585.700,585.550,585.480,585.540,585.720,586.050,585.990,586.630,587.230,587.750,588.260,588.840,589.550,590.340,591.420,591.990,592.870,593.740,594.660,595.720,596.480,597.280,598.200,599.200,600.090,600.890,601.780,602.790,603.760,604.850,606.070,607.410,608.890,610.570,612.190,613.820,614.660,615.790,616.940,618.050,618.870,619.440,619.890,620.290,620.010,620.390,620.500,620.490,619.870,619.990,620.440,621.070,621.880,622.260,623.380,624.600,625.760,626.770,627.660,628.590,629.530,629.950,631.040,631.820,632.380,632.970,633.510,634.100,634.690,634.570,635.000,635.450,635.990,636.570,637.190,637.940,638.180,639.040,639.860,640.650,641.590,642.590,643.620,644.660,645.640,646.260,646.190,646.540,646.910,647.340,647.760,648.180,648.630,649.160,649.670,649.960,650.280,650.470,649.990,650.140,650.290,650.560,650.870,651.210,651.540,651.890,652.240,652.680,652.520,653.030,653.650,654.160,654.570,654.850,655.120,655.370,655.610,655.850,656.100,656.160,656.180,656.160,655.960,655.780,655.580,655.380,655.170,655.010,654.980,655.010,655.690,655.620,655.470,655.320,655.210,655.130,655.080,655.030,655.150,655.320,655.550,655.830,656.130,656.380,656.660,656.970,657.940,658.290,658.610,658.890,659.140,659.400,659.730,660.100,660.450,660.850,661.190,661.530,661.880,662.230,662.640,662.990,663.290,663.600,663.930,664.110,664.920,665.080])
		#self.Va["SA"] = self.Va["SD"]
		self.bV800 = {}
		self.bV800["PGA"] = np.array([-0.764])
		self.bV800["SD"] = np.array([-0.602,-0.666,-0.804,-0.948,-0.964,-0.923,-0.949,
									-0.922,-0.925,-0.950,-0.959,-0.947,-0.915,-0.894,
									-0.881,-0.855,-0.854,-0.860,-0.864,-0.840,-0.820,
									-0.793,-0.770,-0.742,-0.726,-0.711,-0.711,-0.696,
									-0.689,-0.681,-0.671,-0.655,-0.633,-0.624,-0.622,
									-0.614,-0.607,-0.593,-0.583,-0.580,-0.579,-0.578,
									-0.580,-0.580,-0.577,-0.567,-0.557,-0.549,-0.537,
									-0.528,-0.525,-0.521,-0.520,-0.515,-0.513,-0.509,
									-0.505,-0.494,-0.485,-0.476,-0.469,-0.463,-0.458,
									-0.453,-0.449,-0.445,-0.441,-0.440,-0.439,-0.437,
									-0.437,-0.435,-0.434,-0.432,-0.432,-0.432,-0.430,
									-0.426,-0.421,-0.416,-0.410,-0.403,-0.397,-0.390,
									-0.381,-0.376,-0.374,-0.372,-0.370,-0.368,-0.367,
									-0.366,-0.367,-0.367,-0.368,-0.369,-0.368,-0.366,
									-0.365,-0.365,-0.366,-0.366,-0.365,-0.363,-0.362,
									-0.361,-0.360,-0.358,-0.358,-0.358,-0.358,-0.359,
									-0.360,-0.359,-0.357,-0.355,-0.353,-0.349,-0.347,
									-0.344,-0.341,-0.339,-0.338,-0.337,-0.335,-0.334,
									-0.333,-0.331,-0.330,-0.329,-0.329,-0.329,-0.329,
									-0.328,-0.327,-0.325,-0.324,-0.323,-0.321,-0.318,
									-0.316,-0.315,-0.313,-0.312,-0.311,-0.311,-0.311,
									-0.312,-0.313,-0.314,-0.315,-0.317,-0.318,-0.320,
									-0.321,-0.321,-0.322,-0.322,-0.323,-0.323,-0.322,
									-0.322,-0.322,-0.321,-0.320,-0.320,-0.320,-0.319,
									-0.318,-0.318,-0.317,-0.317,-0.317,-0.316,-0.315,
									-0.315,-0.315,-0.314,-0.313,-0.313,-0.312,-0.311,
									-0.311,-0.310,-0.310,-0.310,-0.309,-0.309,-0.308,
									-0.308,-0.307,-0.307,-0.307,-0.307,-0.306,-0.306,
									-0.306,-0.306,-0.306,-0.306,-0.306,-0.306,-0.306,
									-0.305,-0.304,-0.303,-0.302,-0.300,-0.299,-0.298,
									-0.297,-0.295,-0.293,-0.291,-0.289,-0.287,-0.286,
									-0.284,-0.283,-0.281,-0.280,-0.279,-0.279,-0.278,
									-0.278,-0.278,-0.278,-0.278,-0.278,-0.277,-0.277,
									-0.277,-0.277,-0.277,-0.277,-0.277,-0.277,-0.277,
									-0.278,-0.279,-0.279,-0.280,-0.281,-0.281,-0.282,
									-0.282,-0.283,-0.284,-0.285,-0.286,-0.287,-0.288,
									-0.289,-0.289,-0.290,-0.291,-0.292,-0.293,-0.294,
									-0.295,-0.295,-0.296,-0.297,-0.298,-0.300,-0.301,
									-0.302,-0.303,-0.305,-0.306,-0.307,-0.308,-0.308,
									-0.309,-0.310,-0.310,-0.311,-0.311,-0.312,-0.312,
									-0.312,-0.313,-0.314,-0.314,-0.315,-0.316,-0.318,
									-0.319,-0.320,-0.321,-0.322,-0.323,-0.324,-0.325,
									-0.326,-0.327,-0.328,-0.329,-0.329,-0.330,-0.331,
									-0.332,-0.333,-0.333,-0.334,-0.335,-0.336,-0.337,
									-0.338,-0.338,-0.339,-0.340,-0.341,-0.342,-0.343,
									-0.344,-0.345,-0.346,-0.346,-0.347,-0.347,-0.348,
									-0.348,-0.349,-0.349,-0.350,-0.351,-0.351,-0.351,
									-0.352,-0.352,-0.352,-0.353,-0.353,-0.354,-0.354,
									-0.355,-0.355,-0.356,-0.356,-0.357,-0.357,-0.358,
									-0.359,-0.359,-0.360,-0.360,-0.361,-0.361,-0.362,
									-0.362,-0.363,-0.363,-0.363,-0.363,-0.363,-0.363,
									-0.364,-0.364,-0.364,-0.364,-0.364,-0.365,-0.365,
									-0.365,-0.365,-0.366,-0.366,-0.366,-0.367,-0.367,
									-0.368,-0.368,-0.369,-0.369,-0.370,-0.371,-0.371,
									-0.372,-0.373,-0.373,-0.374,-0.374,-0.375,-0.375,
									-0.376,-0.376,-0.377,-0.378,-0.378,-0.379,-0.380,
									-0.380,-0.381,-0.382,-0.382,-0.383,-0.383,-0.384,
									-0.384])
		self.bV800["SA"] = self.bV800["SD"]

		## Unit conversion
		## Original unit is cm
		self.imt_scaling = {}
		self.imt_scaling["PGA"] = {"g": 1./g, "mg": 1E+3/g, "ms2": 1.,
									"gal": 100.0, "cms2": 100.0}
		self.imt_scaling["SD"] = {"m": 1E-2, "cm": 1.0}
		self.imt_scaling["SA"] = {"g": 0.01/g, "mg": 10./g, "ms2": 1E-2,
									"gal": 1.0, "cms2": 1.0}

	def __call__(self, M, d, h=0, imt="PGA", T=0, imt_unit="g", epsilon=0,
				soil_type="rock", vs30=None, explicit_vs30=False, kappa=None,
				mechanism="normal", damping=5):
		"""
		Compute ground motion for given magnitude, distance, depth, soil type,
		and fault mechanism.

		:param M:
			Float or float array, magnitude(s).
			Note that if d is an array, M must be a float.
		:param d:
			Float or float array, distance(s) in km.
			Note that if M is an array, d must be a float.
		:param h:
			float, focal depth in km. Ignored in this GMPE.
			(default: 0)
		:param imt:
			str, one of the supported intensity measure types: "PGA",
			"PHV" or "SA"
			(default: "PGA")
		:param T:
			float, spectral period of considered IMT. Ignored if IMT is
			"PGA" or "PGV"
			(default: 0).
		:param imt_unit:
			str, unit in which intensities should be expressed
			(default: "g")
		:param epsilon:
			float, number of standard deviations above or below the mean
			(default: 0).
		:param soil_type:
			str, either "rock", "stiff" or "soft":
				Rock: VS >= 750 m/s
				Stiff soil: 360 <= VS < 750 m/s
				Soft soil: VS < 360 m/s
			(default: "rock")
		:param vs30:
			float, shear-wave velocity in the upper 30 m (in m/s).
			If not None, it takes precedence over the soil_type parameter.
			(default: None)
		:param explicit_vs30:
			bool, whether or not vs30 value must be used explicitly rather
			than converted to soil_type
			(default: False)
		:param kappa:
			float, kappa value, in seconds. Ignored in this GMPE
			(default: None)
		:param mechanism:
			str, fault mechanism: either "normal", "reverse" or "strike-slip"
			(default: "normal").
		:param damping:
			float, damping in percent. The only upported value is 5.
			(default: 5)

		:return:
			Returns a float array with ground-motion intensities
		"""
		imt = imt.upper()
		scale_factor = self.imt_scaling[imt][imt_unit.lower()]

		if not self.has_imt(imt):
			raise IMTUndefinedError(imt)
		if imt == "PGA":
			a1 = self.a1[imt]
			a2 = self.a2[imt]
			a3 = self.a3[imt]
			if not explicit_vs30:
				aB = self.aB[imt]
				aC = self.aC[imt]
				aD = self.aD[imt]
			else:
				bV800 = self.bV800[imt]
			if mechanism == "normal":
				aN = self.aN[imt]
			elif mechanism == "reverse":
				aR = self.aR[imt]
			elif mechanism == "strike-slip":
				aS = self.aS[imt]
			if mechanism in ("normal", "reverse", "strike-slip"):
				sigma = self.SigmaTM[imt]
			else:
				sigma = self.SigmaTU[imt]
		elif imt in ("SD", "SA"):
			if T < self.Tmin(imt) or T > self.Tmax(imt):
				raise PeriodUndefinedError(imt, T)
				#return None
			elif damping not in self.dampings:
				raise DampingNotSupportedError(damping)
			else:
				sa_periods = self.imt_periods["SA"]
				a1 = interpolate(sa_periods, self.a1[imt], [T])
				a2 = interpolate(sa_periods, self.a2[imt], [T])
				a3 = interpolate(sa_periods, self.a3[imt], [T])
				if not explicit_vs30:
					aB = interpolate(sa_periods, self.aB[imt], [T])
					aC = interpolate(sa_periods, self.aC[imt], [T])
					aD = interpolate(sa_periods, self.aD[imt], [T])
				else:
					bV800 = interpolate(sa_periods, self.bV800[imt], [T])
				if mechanism == "normal":
					aN = interpolate(sa_periods, self.aN[imt], [T])
				elif mechanism == "reverse":
					aR = interpolate(sa_periods, self.aR[imt], [T])
				elif mechanism == "strike-slip":
					aS = interpolate(sa_periods, self.aS[imt], [T])
				if mechanism in ("normal", "reverse", "strike-slip"):
					sigma = interpolate(sa_periods, self.SigmaTM[imt], [T])
				else:
					sigma = interpolate(sa_periods, self.SigmaTU[imt], [T])

		## Common terms
		log_ah = a1 + a2*M + a3*np.log10(d) + epsilon * sigma

		## Site term
		## Option 1: soil types or vs30 converted to soil type
		if vs30 != None:
			if vs30 >= 800:
				soil_type = "rock"
			elif 360 <= vs30 < 800:
				soil_type = "typeB"
			elif 180 <= vs30 < 360:
				soil_type = "typeC"
			else:
				soil_type = "typeD"

		if soil_type.lower() in ("rock", "typea"):
			SB, SC, SD = 0., 0., 0.
		elif soil_type.lower() == "typeb":
			SB, SC, SD = 1., 0., 0.
		elif soil_type.lower() == "typec":
			SB, SC, SD = 0., 1., 0.
		elif soil_type.lower() == "typed":
			SB, SC, SD = 0., 0., 1.

		if not explicit_vs30:
			log_ah += aB*SB + aC*SC + aD*SD
		## Option 2: explicit vs30
		else:
			# TODO: explicit vs30 not checked yet
			log_ah += bV800 * np.log10(vs30 / 800.)

		## Fault-mechanism term

		if mechanism == "normal":
			log_ah += aN
		elif mechanism == "reverse":
			log_ah += aR
		elif mechanism == "strike-slip":
			log_ah += aS

		ah = 10**log_ah

		## Convert SD to PSA
		# TODO: needs to be tested!
		if imt == "SA":
			ah = sd2psa(ah, T)
		## Scaling factor depending on imt_unit
		ah *= scale_factor

		return ah

	def log_sigma(self, M=5., d=10., h=0., imt="PGA", T=0, soil_type="rock",
					vs30=None, kappa=None, mechanism="normal", damping=5):
		"""
		Return standard deviation in log10 space
		Note that this value is independent of data scaling (gal, g, m/s**2, ...)

		:param M:
			Float or float array, magnitude(s).
			Note that if d is an array, M must be a float.
		:param d:
			Float or float array, distance(s) in km.
			Note that if M is an array, d must be a float.
		:param h:
			float, focal depth in km. Ignored in this GMPE.
			(default: 0)
		:param imt:
			str, one of the supported intensity measure types: "PGA",
			"PHV" or "SA"
			(default: "PGA")
		:param T:
			float, spectral period of considered IMT. Ignored if IMT is
			"PGA" or "PGV"
			(default: 0).
		:param soil_type:
			str, either "rock", "stiff" or "soft":
				Rock: VS >= 750 m/s
				Stiff soil: 360 <= VS < 750 m/s
				Soft soil: VS < 360 m/s
			(default: "rock")
		:param vs30:
			float, shear-wave velocity in the upper 30 m (in m/s).
			If not None, it takes precedence over the soil_type parameter.
			(default: None)
		:param explicit_vs30:
			bool, whether or not vs30 value must be used explicitly rather
			than converted to soil_type
			(default: False)
		:param kappa:
			float, kappa value, in seconds. Ignored in this GMPE
			(default: None)
		:param mechanism:
			str, fault mechanism: either "normal", "reverse" or "strike-slip"
			(default: "normal").
		:param damping:
			float, damping in percent. The only upported value is 5.
			(default: 5)
		"""
		imt = imt.upper()
		if not self.has_imt(imt):
			raise IMTUndefinedError(imt)
		if imt == "PGA":
			if not mechanism in ("normal", "reverse", "strike-slip"):
				return np.array(self.SigmaTU[imt][0])
			else:
				return np.array(self.SigmaTM[imt][0])
		elif imt in ("SD", "SA"):
			if T < self.Tmin(imt) or T > self.Tmax(imt):
				raise PeriodUndefinedError(imt, T)
				#return None
			elif damping not in self.dampings:
				raise DampingNotSupportedError(damping)
			else:
				if not mechanism in ("normal", "reverse", "strike-slip"):
					return interpolate(self.imt_periods[imt], self.SigmaTU[imt], [T])
				else:
					return interpolate(self.imt_periods[imt], self.SigmaTM[imt], [T])

	def plot_figure4(self, M=5., d=25.):
		"""
		Plot Figure 4 in the original paper of Cauzzi & Faccioli (2008)
		Use as follows:
		for d in [25., 50., 100.]:
			cf2008.plot_Figure4(M)

		:param M:
			float, moment magnitude (either 5., 5.5, 6. or 7.)
		:param d:
			float, focal distance in km (either 25., 50. or 100)
		"""
		if M == 5.:
			amax = 0.25
		elif M == 5.5:
			amax = 0.8
		elif M == 6.:
			amax = 2.5
		elif M == 7.:
			amax = 30
		title = "Cauzzi & Faccioli (2008) - Figure 4"
		self.plot_spectrum(mags=[M], d=d, imt="SD", imt_unit="cm",
							Tmin=0.05, Tmax=20, plot_style="linlin",
							amin=0, amax=amax, mechanism=None,
							want_minor_grid=True, title=title, legend_location=1)

	def plot_figure13(self, M=5.):
		"""
		Plot Figure 13 in the original paper of Cauzzi & Faccioli (2008)

		Note: distances in this figure are Joyner-Boore distances!
		We don't know the conversion used for M=6.
		Still, I can't reproduce the figure.
		However, I can reproduce a figure for PGA in a report by Ameri et al.

		:param M:
			Int, moment magnitude (either 5 or 7)
		"""
		if M == 5:
			dmin, dmax = 11.9, 100.2
			amin, amax = 0.01, 2.
		elif M == 7:
			dmin, dmax = 14.9, 100.6
			amin, amax = 0.1, 5.
		else:
			dmin, dmax = 10., 100.
			amin, amax = 0.01, 5.
		self.plot_distance(mags=[M], dmin=dmin, dmax=dmax, epsilon=1,
							ymin=amin, ymax=amax, mechanism="strike-slip",
							xscaling="log", yscaling="log", imt_unit="ms2",
							xgrid=2, ygrid=2)

	def plot_Ameri_figure11(self):
		"""
		Plot Figure 11 in the report by Ameri et al.
		"Strong-motion parameters of the Mw=6.3 Abruzzo (Central Italy) earthquake"
		"""
		self.plot_distance(mags=[6.3], dmin=1., dmax=200, ymin=0.01, ymax=50,
							imt_unit="ms2", xscaling="log", yscaling="log",
							epsilon=1, xgrid=2, ygrid=2)


if __name__ == "__main__":
	pass

